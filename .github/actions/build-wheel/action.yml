name: Build wheel (composite)
description: Builds wheels for VGF Adapter for Model Explorer

inputs:
  runner:
    required: true
    type: string
  python-version:
    required: true
    type: string
  platform:
    required: true
    type: string
  arch:
    required: true
    type: string
  llvm-ref:
    required: true
    type: string
  flatbuffers-ref:
    required: true
    type: string
  argparse-ref:
    required: true
    type: string
  json-ref:
    required: true
    type: string
  vgf-lib-ref:
    required: true
    type: string
  model-converter-ref:
    required: true
    type: string
  me-repo-access-app-id:
    required: true
    type: string
  me-repo-access-private-key:
    required: true
    type: string
  qlty_coverage_token:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get app token
      uses: getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc # v3.0.0
      id: get_app_token
      with:
        app_id: ${{ inputs.me-repo-access-app-id }}
        private_key: ${{ inputs.me-repo-access-private-key }}

    - name: Set up Python environment
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ inputs.python-version }}

    - name: Configure environment paths
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "VENV_BIN=.venv/Scripts" >> "$GITHUB_ENV"
          echo "EXE_EXT=.exe" >> "$GITHUB_ENV"
        else
          echo "VENV_BIN=.venv/bin" >> "$GITHUB_ENV"
          echo "EXE_EXT=" >> "$GITHUB_ENV"
        fi

    - name: Checkout plugin repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Checkout Model Converter repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: arm/ai-ml-sdk-model-converter
        path: ai-ml-sdk-model-converter
        ref: ${{ inputs.model-converter-ref }}

    - name: Restore LLVM build cache
      id: cache-llvm-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          llvm-project/build/bin/mlir-translate${{ env.EXE_EXT }}
          llvm-project/build/tools/mlir/python_packages/mlir_core
        key: ${{ inputs.runner }}-${{ inputs.arch }}-python-${{ inputs.python-version }}-llvm-${{ inputs.llvm-ref }}-model-converter-${{ inputs.model-converter-ref }}
    - name: Checkout LLVM repo
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: llvm/llvm-project
        path: llvm-project
        token: ${{ steps.get_app_token.outputs.token }}
        ref: ${{ inputs.llvm-ref }}

    - name: Set up MSVC toolchain
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
      with:
        arch: ${{ inputs.arch == 'arm64' && 'amd64_arm64' || 'amd64' }}

    - name: Build LLVM
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd llvm-project
        python -m venv .venv
        source "$VENV_BIN/activate"
        python -m pip install --upgrade pip
        python -m pip install -r mlir/python/requirements.txt

        # we need to use pybind11_DIR and nanobind_DIR when:
        # 1. packages were installed via pip
        # 2. We are on Windows (where system paths aren't automatically searched).
        NANOBIND_DIR="$(python -c 'import nanobind, pathlib; print(pathlib.Path(nanobind.cmake_dir()).as_posix())')"
        PYB_DIR="$(python -c 'import pybind11, pathlib; print(pathlib.Path(pybind11.get_cmake_dir()).as_posix())')"
        PYTHON_EXEC="$(python -c 'import sys, pathlib; print(pathlib.Path(sys.executable).as_posix())')"

        cp $GITHUB_WORKSPACE/ai-ml-sdk-model-converter/patches/llvm.patch .
        patch -p1 < llvm.patch
        mkdir -p build
        cd build
        cmake_args=(
            -G
            Ninja
            ../llvm
            -DLLVM_ENABLE_PROJECTS=mlir
            -DLLVM_TARGETS_TO_BUILD="Native"
            -DCMAKE_BUILD_TYPE=Release
            -DLLVM_REQUIRES_RTTI=ON
            -DLLVM_REQUIRES_EH=ON
            -DLLVM_ENABLE_RTTI=ON
            -DLLVM_ENABLE_EH=ON
            -DLLVM_ENABLE_ASSERTIONS=ON
            -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF
            -DMLIR_INCLUDE_INTEGRATION_TESTS=ON
            -DLLVM_ENABLE_TERMINFO=OFF
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON
            -DPython3_EXECUTABLE="$PYTHON_EXEC"
            -DPython3_FIND_VIRTUALENV=FIRST
            -DPython3_FIND_STRATEGY=LOCATION
            -DPython_EXECUTABLE="$PYTHON_EXEC"
            -DPython_FIND_VIRTUALENV=FIRST
            -DPython_FIND_STRATEGY=LOCATION
            -Dpybind11_DIR="$PYB_DIR"
            -Dnanobind_DIR="$NANOBIND_DIR"
        )
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake_args+=(
            -DCMAKE_C_COMPILER=cl
            -DCMAKE_CXX_COMPILER=cl
            -DCMAKE_LINKER=link.exe
            -DLLVM_USE_LINKER=link
          )
        fi
        cmake "${cmake_args[@]}"
        cmake --build . --target check-mlir
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake --build . --target llvm-strip
        fi
        deactivate

    - name: Strip mlir-translate (unix)
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' && runner.os != 'Windows' }}
      shell: bash
      run: strip ${{ github.workspace }}/llvm-project/build/bin/mlir-translate

    - name: Strip mlir-translate (Windows)
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' && runner.os == 'Windows' }}
      shell: bash
      run: |
        "$GITHUB_WORKSPACE/llvm-project/build/bin/llvm-strip.exe" --strip-all "$GITHUB_WORKSPACE/llvm-project/build/bin/mlir-translate.exe"

    - name: Reduce MLIR Python bindings
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        find $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir -type d -name "__pycache__" -exec rm -rf {} +
        find $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir \( -name "*.d" -o -name "*.td" \) -type f -delete
        python scripts/replace_symlinks_in_llvm_python_package.py $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir --yes
        rm -f $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs/libMLIRPythonCAPI.so
        rm -rf $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs/include

    - name: Save LLVM build cache
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      id: cache-llvm-save
      uses: actions/cache/save@v4
      with:
        path: |
          llvm-project/build/bin/mlir-translate${{ env.EXE_EXT }}
          llvm-project/build/tools/mlir/python_packages/mlir_core
        key: ${{ steps.cache-llvm-restore.outputs.cache-primary-key }}

    - name: Add mlir-translate to PATH
      shell: bash
      run: echo "${{ github.workspace }}/llvm-project/build/bin" >> "$GITHUB_PATH"

    - name: Checkout flatbuffers repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: google/flatbuffers
        path: flatbuffers
        ref: ${{ inputs.flatbuffers-ref }}

    - name: Set up flatbuffers build cache
      id: cache-flatbuffers-cc
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: flatbuffers
        key: ${{ inputs.runner }}-${{ inputs.arch }}-flatbuffers-${{ inputs.flatbuffers-ref }}

    - name: Build flatbuffers
      if: ${{ steps.cache-flatbuffers-cc.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd flatbuffers
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=cl \
            -DCMAKE_CXX_COMPILER=cl \
            -DCMAKE_LINKER=link.exe \
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
        else
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release
        fi
        cmake --build . --parallel

    - name: Checkout argparse repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: p-ranav/argparse
        path: argparse
        ref: ${{ inputs.argparse-ref }}

    - name: Set up argparse build cache
      id: cache-argparse-cc
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: argparse/build
        key: ${{ inputs.runner }}-${{ inputs.arch }}-argparse-${{ inputs.argparse-ref }}

    - name: Build argparse
      if: ${{ steps.cache-argparse-cc.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd argparse
        mkdir -p build
        cd build
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=cl \
            -DCMAKE_CXX_COMPILER=cl \
            -DCMAKE_LINKER=link.exe \
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded \
            -DARGPARSE_BUILD_SAMPLES=on -DARGPARSE_BUILD_TESTS=on ..
        else
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DARGPARSE_BUILD_SAMPLES=on -DARGPARSE_BUILD_TESTS=on ..
        fi
        cmake --build . --parallel

    - name: Checkout json repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: nlohmann/json
        path: json
        ref: ${{ inputs.json-ref }}

    - name: Checkout VGF library repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: arm/ai-ml-sdk-vgf-library
        path: ai-ml-sdk-vgf-library
        ref: ${{ inputs.vgf-lib-ref }}

    - name: Set up VGF library build cache
      id: cache-vgf-lib-cc
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ai-ml-sdk-vgf-library/build
        key: ${{ inputs.runner }}-${{ inputs.arch }}-vgf-lib-${{ inputs.vgf-lib-ref }}

    - name: Build VGF library
      if: ${{ steps.cache-vgf-lib-cc.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd ai-ml-sdk-vgf-library
        python -m venv .venv
        source "$VENV_BIN/activate"
        ./scripts/build.py --flatc-path "$GITHUB_WORKSPACE/flatbuffers/flatc$EXE_EXT" --argparse-path $GITHUB_WORKSPACE/argparse --json-path $GITHUB_WORKSPACE/json --flatbuffers-path $GITHUB_WORKSPACE/flatbuffers
        deactivate

    - name: Add vgf_dump to PATH
      shell: bash
      run: echo "${{ github.workspace }}/ai-ml-sdk-vgf-library/build/vgf_dump" >> $GITHUB_PATH

    - name: Install plugin Python packages
      shell: bash
      run: |
        python -m venv .venv
        source "$VENV_BIN/activate"
        python -m pip install .[test]
        if [ "${{ github.repository_owner }}" != "arm" ]; then
            python -m pip install .[coverage]
        fi
        deactivate

    - name: Copy dependencies
      shell: bash
      run: |
        source "$VENV_BIN/activate"
        rm -rf $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs/include
        cp -r $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir src/mlir

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cp $GITHUB_WORKSPACE/ai-ml-sdk-vgf-library/build/vgf_dump/Release/vgf_dump.exe src/vgf_adapter_model_explorer/bin
        else
          cp $GITHUB_WORKSPACE/ai-ml-sdk-vgf-library/build/vgf_dump/vgf_dump src/vgf_adapter_model_explorer/bin
        fi

        cp "$GITHUB_WORKSPACE/llvm-project/build/bin/mlir-translate$EXE_EXT" src/vgf_adapter_model_explorer/bin
        deactivate

    - name: Run plugin tests
      shell: bash
      run: |
        source "$VENV_BIN/activate"
        PYTHONPATH=${{ github.workspace }}/llvm-project/build/tools/mlir/python_packages/mlir_core:. pytest --tb=short -v ${{ github.repository_owner != 'arm' && '--cov=vgf_adapter_model_explorer --cov-report=lcov:reports/lcov.info' || '' }}
        deactivate

    - name: Upload coverage to Qlty
      if: github.repository_owner != 'arm'
      uses: qltysh/qlty-action/coverage@9e8e09dfc3d82a968f4034f5265eaf3c142881f7 # v2.0.0
      with:
        token: ${{ inputs.qlty_coverage_token }}
        files: reports/lcov.info

    - name: Build wheel
      shell: bash
      run: |
        source "$VENV_BIN/activate"
        TAG="${{ inputs.python-version }}"
        TAG="${TAG//./}"
        echo -e "[bdist_wheel]\npython_tag = cp$TAG" > setup.cfg

        python -m pip install build wheel
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          python -m pip install auditwheel
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          python -m pip install delocate
        else
          rm -rf dist wheelhouse
          mkdir -p dist wheelhouse
          python -m pip install delvewheel
        fi
        python -m build
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          auditwheel repair --plat ${{ inputs.platform }} dist/*.whl
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          delocate-wheel -w wheelhouse dist/*.whl
        else
          delvewheel repair dist/*.whl -w wheelhouse --add-path "$GITHUB_WORKSPACE/llvm-project/build/bin" \
            --add-path "$GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs" \
            --namespace-pkg mlir
        fi
        deactivate

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: python-wheels-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.python-version }}
        path: wheelhouse/*.whl
