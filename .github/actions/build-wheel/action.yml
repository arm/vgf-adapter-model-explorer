name: Build wheel (composite)
description: Builds wheels for VGF Adapter for Model Explorer

inputs:
  runner:
    required: true
    type: string
  python-version:
    required: true
    type: string
  platform:
    required: true
    type: string
  arch:
    required: true
    type: string
  llvm-ref:
    required: true
    type: string
  flatbuffers-ref:
    required: true
    type: string
  argparse-ref:
    required: true
    type: string
  json-ref:
    required: true
    type: string
  vgf-lib-ref:
    required: true
    type: string
  model-converter-ref:
    required: true
    type: string
  me-repo-access-app-id:
    required: true
    type: string
  me-repo-access-private-key:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get app token
      uses: getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc # v3.0.0
      id: get_app_token
      with:
        app_id: ${{ inputs.me-repo-access-app-id }}
        private_key: ${{ inputs.me-repo-access-private-key }}

    - name: Set up Python environment
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ inputs.python-version }}

    - name: Checkout plugin repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        path: vgf_adapter_model_explorer

    - name: Checkout Model Converter repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: arm/ai-ml-sdk-model-converter
        path: ai-ml-sdk-model-converter
        ref: ${{ inputs.model-converter-ref }}

    - name: Restore LLVM build cache
      id: cache-llvm-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          llvm-project/build/bin/mlir-translate
          llvm-project/build/tools/mlir/python_packages/mlir_core
        key: ${{ inputs.runner }}-${{ inputs.arch }}-python-${{ inputs.python-version }}-llvm-${{ inputs.llvm-ref }}-model-converter-${{ inputs.model-converter-ref }}
    - name: Checkout LLVM repo
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: llvm/llvm-project
        path: llvm-project
        token: ${{ steps.get_app_token.outputs.token }}
        ref: ${{ inputs.llvm-ref }}

    - name: Build LLVM
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd llvm-project
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install -r mlir/python/requirements.txt
        cp $GITHUB_WORKSPACE/ai-ml-sdk-model-converter/patches/llvm.patch .
        patch -p1 < llvm.patch
        mkdir -p build
        cd build
        cmake -G Ninja ../llvm \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_TARGETS_TO_BUILD="Native" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_REQUIRES_RTTI=ON \
            -DLLVM_REQUIRES_EH=ON \
            -DLLVM_ENABLE_RTTI=ON \
            -DLLVM_ENABLE_EH=ON \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
            -DMLIR_INCLUDE_INTEGRATION_TESTS=ON \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DPython3_EXECUTABLE=$(which python)
        cmake --build . --target check-mlir
        deactivate

    - name: Strip mlir-translate
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      shell: bash
      run: strip ${{ github.workspace }}/llvm-project/build/bin/mlir-translate

    - name: Reduce MLIR Python bindings
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd vgf_adapter_model_explorer
        find $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir -type d -name "__pycache__" -exec rm -rf {} +
        find $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir \( -name "*.d" -o -name "*.td" \) -type f -delete
        python scripts/replace_symlinks_in_llvm_python_package.py $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir --yes
        rm -f $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs/libMLIRPythonCAPI.so
        rm -rf $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs/include

    - name: Save LLVM build cache
      if: ${{ steps.cache-llvm-restore.outputs.cache-hit != 'true' }}
      id: cache-llvm-save
      uses: actions/cache/save@v4
      with:
        path: |
          llvm-project/build/bin/mlir-translate
          llvm-project/build/tools/mlir/python_packages/mlir_core
        key: ${{ steps.cache-llvm-restore.outputs.cache-primary-key }}

    - name: Add mlir-translate to PATH
      shell: bash
      run: echo "${{ github.workspace }}/llvm-project/build/bin" >> "$GITHUB_PATH"

    - name: Checkout flatbuffers repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: google/flatbuffers
        path: flatbuffers
        ref: ${{ inputs.flatbuffers-ref }}

    - name: Set up flatbuffers build cache
      id: cache-flatbuffers-cc
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: flatbuffers
        key: ${{ inputs.runner }}-${{ inputs.arch }}-flatbuffers-${{ inputs.flatbuffers-ref }}

    - name: Build flatbuffers
      if: ${{ steps.cache-flatbuffers-cc.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd flatbuffers
        cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
        make -j

    - name: Checkout argparse repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: p-ranav/argparse
        path: argparse
        ref: ${{ inputs.argparse-ref }}

    - name: Set up argparse build cache
      id: cache-argparse-cc
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: argparse/build
        key: ${{ inputs.runner }}-${{ inputs.arch }}-argparse-${{ inputs.argparse-ref }}

    - name: Build argparse
      if: ${{ steps.cache-argparse-cc.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd argparse
        mkdir -p build
        cd build
        cmake -DARGPARSE_BUILD_SAMPLES=on -DARGPARSE_BUILD_TESTS=on ..
        make

    - name: Checkout json repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: nlohmann/json
        path: json
        ref: ${{ inputs.json-ref }}

    - name: Checkout VGF library repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: arm/ai-ml-sdk-vgf-library
        path: ai-ml-sdk-vgf-library
        ref: ${{ inputs.vgf-lib-ref }}

    - name: Set up VGF library build cache
      id: cache-vgf-lib-cc
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ai-ml-sdk-vgf-library/build
        key: ${{ inputs.runner }}-${{ inputs.arch }}-vgf-lib-${{ inputs.vgf-lib-ref }}

    - name: Build VGF library
      if: ${{ steps.cache-vgf-lib-cc.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cd ai-ml-sdk-vgf-library
        python -m venv .venv
        source .venv/bin/activate
        ./scripts/build.py --flatc-path $GITHUB_WORKSPACE/flatbuffers/flatc --argparse-path $GITHUB_WORKSPACE/argparse --json-path $GITHUB_WORKSPACE/json --flatbuffers-path $GITHUB_WORKSPACE/flatbuffers
        deactivate

    - name: Add vgf_dump to PATH
      shell: bash
      run: echo "${{ github.workspace }}/ai-ml-sdk-vgf-library/build/vgf_dump" >> $GITHUB_PATH

    - name: Install plugin Python packages
      shell: bash
      run: |
        cd vgf_adapter_model_explorer
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install .[test]
        deactivate

    - name: Copy dependencies
      shell: bash
      run: |
        cd vgf_adapter_model_explorer
        source .venv/bin/activate
        rm -rf $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir/_mlir_libs/include
        cp -r $GITHUB_WORKSPACE/llvm-project/build/tools/mlir/python_packages/mlir_core/mlir src/mlir
        cp $GITHUB_WORKSPACE/ai-ml-sdk-vgf-library/build/vgf_dump/vgf_dump src/vgf_adapter_model_explorer/bin
        cp $GITHUB_WORKSPACE/llvm-project/build/bin/mlir-translate src/vgf_adapter_model_explorer/bin
        deactivate

    - name: Run plugin tests
      shell: bash
      run: |
        cd vgf_adapter_model_explorer
        source .venv/bin/activate
        PYTHONPATH=${{ github.workspace }}/llvm-project/build/tools/mlir/python_packages/mlir_core:. pytest --tb=short -v
        deactivate

    - name: Build wheel
      shell: bash
      run: |
        cd vgf_adapter_model_explorer
        source .venv/bin/activate
        TAG="${{ inputs.python-version }}"
        TAG="${TAG//./}"
        echo -e "[bdist_wheel]\npython_tag = cp$TAG" > setup.cfg
        python -m pip install build wheel
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          python -m pip install auditwheel
        else
          python -m pip install delocate
        fi
        python -m build
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          auditwheel repair --plat ${{ inputs.platform }} dist/*.whl
        else
          delocate-wheel -w wheelhouse dist/*.whl
        fi
        deactivate

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: python-wheels-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.python-version }}
        path: vgf_adapter_model_explorer/wheelhouse/*.whl
